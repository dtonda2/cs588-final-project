// Importing the Convex-generated Id type for friend_requests, ensuring type safety for IDs.
import { Id } from '../../convex/_generated/dataModel';
// Importing React and its Functional Component (FC) type.
import { FC } from 'react';
// Importing API methods generated by Convex for friend request operations.
import { api } from '../../convex/_generated/api';
// Importing toast notifications for providing user feedback.
import { toast } from 'sonner';
// Importing the ConvexError class for proper error handling.
import { ConvexError } from 'convex/values';
// Importing icons from lucide-react for UI representation.
import { Handshake, X } from 'lucide-react';

// Importing a custom hook to handle mutations with state management.
import { useMutationHandler } from '@/hooks/use-mutation-handler';
// Importing UI components for displaying user avatars.
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
// Importing a switch component for accepting friend requests.
import { Switch } from '@/components/ui/switch';
// Importing a button component for declining friend requests.
import { Button } from '@/components/ui/button';

// Defining the props type for FriendRequestCard.
// - id: Unique identifier for the friend request.
// - imageUrl: URL of the sender's profile image.
// - username: Sender's username.
// - email: Sender's email address.
type FriendRequestCardProps = {
  id: Id<'friend_requests'>;
  imageUrl: string;
  username: string;
  email: string;
};

// FriendRequestCard component displays an individual friend request with accept/decline actions.
export const FriendRequestCard: FC<FriendRequestCardProps> = ({
  email,
  id,
  imageUrl,
  username,
}) => {
  // Set up a mutation handler for accepting a friend request.
  // `acceptRequest` is the function to trigger the mutation.
  // `acceptRequestState` tracks the state of the mutation (idle, loading, success, error).
  const { mutate: acceptRequest, state: acceptRequestState } =
    useMutationHandler(api.friend_request.accept);
  
  // Set up a mutation handler for declining a friend request.
  // `declineRequest` is the function to trigger the decline mutation.
  // `declineRequestState` tracks its state.
  const { mutate: declineRequest, state: declineRequestState } =
    useMutationHandler(api.friend_request.decline);

  // Function to handle declining a friend request.
  // Accepts the friend request id as a parameter.
  const handleDenyRequest = async (id: string) => {
    try {
      // Execute the decline mutation with the given id.
      await declineRequest({ id });
      // Show a success notification upon successful decline.
      toast.success('Friend request declined');
    } catch (error) {
      // Log the error for debugging purposes.
      console.log('Error declining friend request:', error);
      // Display an error notification, extracting error details if available.
      toast.error(
        error instanceof ConvexError ? error.data : 'An error occurred'
      );
    }
  };

  // Function to handle accepting a friend request.
  // Accepts the friend request id as a parameter.
  const handleAcceptRequest = async (id: string) => {
    try {
      // Execute the accept mutation with the given id.
      await acceptRequest({ id });
      // Show a success notification upon successful acceptance.
      toast.success('Friend request accepted');
    } catch (error) {
      // Log the error for debugging purposes.
      console.log('Error accepting friend request:', error);
      // Display an error notification, extracting error details if available.
      toast.error(
        error instanceof ConvexError ? error.data : 'An error occurred'
      );
    }
  };

  // Render the friend request card UI.
  return (
    // Main container with flex layout for avatar, info, and action buttons.
    <div className='flex items-center justify-between space-x-4 rounded-md border p-4'>
      {/* Container for the sender's avatar and info */}
      <div className='flex items-center space-x-3'>
        {/* Handshake icon representing a friend request */}
        <Handshake />
        {/* Avatar component displaying the sender's profile image */}
        <Avatar>
          <AvatarImage src={imageUrl} />
          {/* Fallback to initials if image fails to load */}
          <AvatarFallback>{username.slice(0, 1)}</AvatarFallback>
        </Avatar>
        {/* Container for username and email */}
        <div className='flex justify-between items-center'>
          <div className='flex-1 space-y-1'>
            {/* Display the sender's username */}
            <p className='text-sm font-medium leading-none'>{username}</p>
            {/* Display the sender's email in a muted tone */}
            <p className='text-sm text-muted-foreground'>{email}</p>
          </div>
        </div>
      </div>
      {/* Container for action buttons: Accept (Switch) and Decline (Button) */}
      <div className='flex items-center gap-x-5'>
        {/* Switch component to accept the friend request */}
        <Switch
          disabled={
            // Disable the switch if either mutation is in a loading state.
            acceptRequestState === 'loading' ||
            declineRequestState === 'loading'
          }
          // Trigger the accept request handler when the switch is toggled.
          onCheckedChange={_ => handleAcceptRequest(id)}
        />
        {/* Button to decline the friend request */}
        <Button
          size='icon'
          variant='destructive'
          disabled={
            // Disable the button if either mutation is in a loading state.
            acceptRequestState === 'loading' ||
            declineRequestState === 'loading'
          }
          // Trigger the deny request handler when the button is clicked.
          onClick={_ => handleDenyRequest(id)}
        >
          {/* Icon representing the decline action */}
          <X />
        </Button>
      </div>
    </div>
  );
};
